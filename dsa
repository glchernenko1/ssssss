using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PathNode : Priority_Queue.FastPriorityQueueNode
{
    public bool walkable;            //  Проходим узел сетки
    public Vector3 worldPosition;    //  Координаты узла
    public GameObject body;         //  Тело узла
    private PathNode parent = null;  //  Родительский узел
    private float distance = float.PositiveInfinity;
    public Vector2Int gridIndex;
    public PathNode ParentNode
    {
        get => parent;
        set => SetParent(value);
    }

    private void SetParent(PathNode parentNode)
    {
        parent = parentNode;
        if (parent != null)
            distance = parent.distance + PathNode.Dist(parent, this);
        else
            distance = float.PositiveInfinity;
    }

    public float Distance
    {
        get => distance;
        set => distance = value;    //   Плохо!
    }

    public PathNode(GameObject prefab, bool walkable, Vector3 position)
    {
        this.walkable = walkable;
        worldPosition = position;
        SetParent(null);
        body = GameObject.Instantiate(prefab, position, Quaternion.identity);
    }

    public static float Dist(PathNode source, PathNode dest)
    {
        float baseDist = Vector3.Distance(source.worldPosition, dest.worldPosition);
        if (dest.worldPosition.y > source.worldPosition.y)
            return baseDist + 10 * (dest.worldPosition.y - source.worldPosition.y);
        else
            //return baseDist + (dest.worldPosition.y - source.worldPosition.y);
            return baseDist;
    }

    public void Illuminate()
    {
        body.GetComponent<Renderer>().material.color = Color.blue;
    }

    public void Fade()
    {
        body.GetComponent<Renderer>().material.color = Color.gray;
    }

    public void Highlight()
    {
        body.GetComponent<Renderer>().material.color = Color.red;
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Grid : MonoBehaviour
{
    [SerializeField] private GameObject nodeModel;      //   Шаблон узла сетки
    [SerializeField] private Terrain landscape;
    [SerializeField] private float gridDelta = 20;
    private int updateAtFrame = 0;

    private PathNode[,] grid = null;

    private void CheckWalkableNodes()
    {
        foreach(PathNode node in grid)
        {
            //node.walkable = true;
            node.walkable = !Physics.CheckSphere(node.worldPosition, 1) && (node.worldPosition.y < 80);
            if (node.walkable)
                node.Illuminate();
            else
                node.Fade();
        }
    }

    private List<Vector2Int> GetNeighbours(Vector2Int current)
    {
        List<Vector2Int> nodes = new List<Vector2Int>();

        for (int x = current.x - 1; x <= current.x + 1; ++x)
            for (int y = current.y - 1; y <= current.y + 1; ++y)
                if(x >= 0 && x < grid.GetLength(0) && y>=0 && y < grid.GetLength(1) && (x != current.x || y != current.y) && grid[x,y].walkable)
                nodes.Add(new Vector2Int(x, y));
        return nodes;
    }

    void CalculatePath(Vector2Int startNode, Vector2Int finishNode)
    {
        CheckWalkableNodes();
        foreach(PathNode node in grid)
            node.ParentNode = null;

        PathNode start = grid[startNode.x, startNode.y];
        start.ParentNode = null;
        start.Distance = 0;

        // Нужна очередь с приоритетом!!!
        Vector3 terrainSize = landscape.terrainData.bounds.size;
        int sizeX = (int)(terrainSize.x / gridDelta);
        int sizeZ = (int)(terrainSize.z / gridDelta);
        Priority_Queue.FastPriorityQueue<PathNode> pq = new Priority_Queue.FastPriorityQueue<PathNode>(sizeX*sizeZ*2);
        
        //Queue<Vector2Int> nodes = new Queue<Vector2Int>();
        pq.Enqueue(start, 0);

        float startTime = Time.time;

        while(pq.Count > 0)
        {
            //  Вытаскиваем очередную вершину из списка
            PathNode current = pq.Dequeue();
            current.body.GetComponent<HighLight>().setStartTime(startTime);
            startTime += 0.08f;
            pq.ResetNode(current);

            Vector2Int currentIndex = current.gridIndex;
            if (currentIndex == finishNode) break;
            //PathNode current = grid[currentIndex.x, currentIndex.y];
            
            var neighbours = GetNeighbours(currentIndex);
            //Debug.Log("Neighbours : " + neighbours.Count);
            foreach(var node in neighbours)
            {
                PathNode next = grid[node.x, node.y];
                if (next.Distance > current.Distance + PathNode.Dist(current, next))
                {
                    next.ParentNode = current;
                    if (pq.Contains(next))
                        pq.UpdatePriority(next, next.Distance);
                    else
                        pq.Enqueue(next, next.Distance);
                }
            }
        }

        while(pq.Count > 0)
        {
            PathNode current = pq.Dequeue();
            pq.ResetNode(current);
        }

        //Debug.Log("Building path");
        PathNode pathPoint = grid[finishNode.x, finishNode.y];
        while(pathPoint != null)
        {
            pathPoint.Highlight();
            pathPoint = pathPoint.ParentNode;
        }
    }


    void CalculatePath1(Vector2Int startNode, Vector2Int finishNode)
    {
        CheckWalkableNodes();
        foreach (PathNode node in grid)
            node.ParentNode = null;

        PathNode start = grid[startNode.x, startNode.y];
        start.ParentNode = null;
        start.Distance = 0;

        // Нужна очередь с приоритетом!!!
        Vector3 terrainSize = landscape.terrainData.bounds.size;
        int sizeX = (int)(terrainSize.x / gridDelta);
        int sizeZ = (int)(terrainSize.z / gridDelta);
        Priority_Queue.FastPriorityQueue<PathNode> pq = new Priority_Queue.FastPriorityQueue<PathNode>(sizeX * sizeZ * 2);

        //Queue<Vector2Int> nodes = new Queue<Vector2Int>();
        pq.Enqueue(start, 0);

        HashSet<Vector2Int> tmp = new HashSet<Vector2Int>();

        float startTime = Time.time;

        while (pq.Count > 0)
        {
            //  Вытаскиваем очередную вершину из списка
            PathNode current = pq.Dequeue();
            current.body.GetComponent<HighLight>().setStartTime(startTime);
            startTime += 0.08f;
            pq.ResetNode(current);

            Vector2Int currentIndex = current.gridIndex;
            if (tmp.Contains(currentIndex)) continue;

            if (currentIndex == finishNode) break;
            var neighbours = GetNeighbours(currentIndex);
            
            foreach (var node in neighbours)
            {
                PathNode next = grid[node.x, node.y];
                if (next.Distance > current.Distance + PathNode.Dist(current, next))
                {
                    next.ParentNode = current;

                    if (pq.Contains(next))
                        pq.UpdatePriority(next, next.Distance);
                    else
                        pq.Enqueue(next, next.Distance);

                }
            }
        }

        while (pq.Count > 0)
        {
            PathNode current = pq.Dequeue();
            pq.ResetNode(current);
        }

        //Debug.Log("Building path");
        PathNode pathPoint = grid[finishNode.x, finishNode.y];
        while (pathPoint != null)
        {
            pathPoint.Highlight();
            pathPoint = pathPoint.ParentNode;
        }
    }




    // Метод вызывается однократно при создании экземпляра класса
    void Start()
    {
        Vector3 terrainSize = landscape.terrainData.bounds.size;
        int sizeX = (int)(terrainSize.x / gridDelta);
        int sizeZ = (int)(terrainSize.z / gridDelta);

        grid = new PathNode[sizeX, sizeZ];
        for(int x = 0; x<sizeX; ++x)
            for(int z = 0; z<sizeZ; ++z)
            {
                Vector3 position = new Vector3(x * gridDelta, 0, z * gridDelta);
                position.y = landscape.SampleHeight(position) + 25;
                grid[x, z] = new PathNode(nodeModel, true, position);
                //  Каждый узел массива знает своё место
                grid[x, z].gridIndex = new Vector2Int(x, z);
                grid[x, z].Fade();
            }
        CheckWalkableNodes();
    }
    

    // Метод вызывается каждый кадр
    void Update()
    {
        if (Time.frameCount < updateAtFrame) return;
        updateAtFrame = Time.frameCount + 500;
        //Debug.Log("Pathfinding started");

        CalculatePath(new Vector2Int(0, 0), new Vector2Int(grid.GetLength(0) - 3, grid.GetLength(1) - 3));
    }
}

//////////////////

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class HighLight : MonoBehaviour
{
    private float timeOfStart = -1f;
    private float scaleFactor = 1f;
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        if (timeOfStart > 0)
        {
            if (timeOfStart >= Time.time - 10 && timeOfStart < Time.time)
            {
                //  Увеличивать размер текущего элемента на немного при определённых условиях
                //scaleFactor += 0.04f;
                //transform.localScale = Vector3.one * scaleFactor;
                GetComponent<Renderer>().material.color = Color.red;
            }
            //else GetComponent<Renderer>().material.color = Color.blue;
        }
    }
    
    /// <summary>
    /// Устанавливает время начала роста
    /// </summary>
    /// <param name="tm"></param>
    public void setStartTime(float tm)
    {
        timeOfStart = tm;
    }
}

