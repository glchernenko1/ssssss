CheckWalkableNodes();
        foreach (PathNode node in grid)
            node.ParentNode = null;

        PathNode start = grid[startNode.x, startNode.y];
        start.ParentNode = null;
        start.Distance = 0;

        // Нужна очередь с приоритетом!!!
        Vector3 terrainSize = landscape.terrainData.bounds.size;
        int sizeX = (int)(terrainSize.x / gridDelta);
        int sizeZ = (int)(terrainSize.z / gridDelta);
        Priority_Queue.FastPriorityQueue<PathNode> pq = new Priority_Queue.FastPriorityQueue<PathNode>(sizeX * sizeZ * 2);

        //Queue<Vector2Int> nodes = new Queue<Vector2Int>();
        pq.Enqueue(start, 0);

        HashSet<Vector2Int> tmp = new HashSet<Vector2Int>();

        float startTime = Time.time;

        while (pq.Count > 0)
        {
            //  Вытаскиваем очередную вершину из списка
            PathNode current = pq.Dequeue();
            current.body.GetComponent<HighLight>().setStartTime(startTime);
            startTime += 0.08f;
            pq.ResetNode(current);

            Vector2Int currentIndex = current.gridIndex;
            if (tmp.Contains(currentIndex)) continue;

            if (currentIndex == finishNode) break;
            var neighbours = GetNeighbours(currentIndex);
            
            foreach (var node in neighbours)
            {
                PathNode next = grid[node.x, node.y];
                if (next.Distance > current.Distance + PathNode.Dist(current, next))
                {
                    next.ParentNode = current;

                    if (pq.Contains(next))
                        pq.UpdatePriority(next, next.Distance);
                    else
                        pq.Enqueue(next, next.Distance);

                }
            }
        }

        while (pq.Count > 0)
        {
            PathNode current = pq.Dequeue();
            pq.ResetNode(current);
        }

        //Debug.Log("Building path");
        PathNode pathPoint = grid[finishNode.x, finishNode.y];
        while (pathPoint != null)
        {
            pathPoint.Highlight();
            pathPoint = pathPoint.ParentNode;
        }
